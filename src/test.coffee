QUnit.module("URL")

QUnit.asyncTest "createBlobURL", (assert)->
  n = 0
  test = (val, expected)->
    n++
    url = createBlobURL(val, "text/plain")
    $.ajax
      url: url
      error: (err)-> throw err
      success: (res)->
        assert.strictEqual(res, expected, res)
        if --n is 0 then QUnit.start()
  test("𠮟",
       "𠮟")
  test("🐲",
       "🐲")
  test(new ArrayBuffer(), "")
  test(new Blob(), "")
  expect(n)

QUnit.asyncTest "URLToText", (assert)->
  n = 0
  test = (val, expected)->
    n++
    url = createBlobURL(val, 'text/plain')
    URLToText url, (text)->
      assert.strictEqual(text, expected, text)
      if --n is 0 then QUnit.start()
  test("𠮟",
       "𠮟")
  test("🐲",
       "🐲")
  expect(n)

QUnit.asyncTest "URLToArrayBuffer", (assert)->
  n = 0
  test = (val, expected)->
    n++
    url = createBlobURL(val, 'text/plain')
    URLToArrayBuffer url, (arrayBuffer)->
      assert.strictEqual(arrayBuffer.byteLength, expected, arrayBuffer.byteLength)
      if --n is 0 then QUnit.start()
  test("𠮟", 4)
  test("🐲", 4)
  test(new ArrayBuffer(12), 12)
  expect(n)

QUnit.test "makeURL", (assert)->
  expect(1)
  assert.strictEqual(makeURL(location)+location.search+location.hash, location.href)

QUnit.test "encodeURIQuery, decodeURIQuery", (assert)->
  expect(1)
  dic =
    a: "a"
    b: "𠮟"
    c: "🐲"
  _dic = decodeURIQuery encodeURIQuery decodeURIQuery encodeURIQuery dic
  assert.deepEqual(_dic, dic, _dic)

QUnit.asyncTest "shortenURL, expandURL", (assert)->
  expect(1)
  url = location.href
  shortenURL url, (_url)->
    expandURL _url, (__url)->
      assert.strictEqual(__url, url, __url)
  setTimeout (-> QUnit.start()), 1000


QUnit.module("ZIP")

QUnit.test "zipDataURI, unzipDataURI", (assert)->
  expect(1)
  dic =
    a: "a"
    b: "𠮟"
    c: "🐲"
  _dic = unzipDataURI zipDataURI unzipDataURI zipDataURI dic
  assert.deepEqual(_dic, dic, JSON.stringify(_dic))


QUnit.module("DOM")

QUnit.test "getElmVal", (assert)->
  expect(3)
  elm = $('<select><option value="a" selected="selected">a</option></option>')
  assert.strictEqual(getElmVal(elm), "a", elm)
  elm = $('<input type="text" value="a" />')
  assert.strictEqual(getElmVal(elm), "a", elm)
  elm = $('<textarea>a</textarea>')
  assert.strictEqual(getElmVal(elm), "a", elm)


QUnit.module("Compiler")

QUnit.asyncTest "getCompilerSetting", (assert)->
  n = 0
  test = (lang, o)->
    n++
    {mode, compile} = getCompilerSetting(lang)
    compile o.before, (err, code)->
      assert.strictEqual(mode, o.mode, mode)
      assert.strictEqual(err, null, err)
      assert.strictEqual(code, o.after, code)
      if --n is 0 then QUnit.start()
  test("JavaScript", {mode:"javascript", before:"(function(){}());", after:"(function(){}());"})
  test("CoffeeScript", {mode:"coffeescript", before:"do ->", after:"(function() {})();\n"})
  test("TypeScript", {mode:"javascript", before:"(function(){}());", after:"(function () {\r\n}());\r\n"})
  test("LispyScript", {mode:"scheme", before:"((function ()))", after:"// Generated by LispyScript v0.3.6\n(function() {\n})();\n"})
  test("Jade", {mode:"jade", before:"p hello", after:"\n<p>hello</p>"})
  test("LESS", {mode:"css", before:"*{color:red;}", after:"* {\n  color: red;\n}\n"})
  test("Stylus", {mode:"css", before:"*{color:red;}", after:"* {\n  color: #f00;\n}\n"})
  expect(n*3)

QUnit.asyncTest "compileAll", (assert)->


QUnit.module("Complex")
